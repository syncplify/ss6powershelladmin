#
# SMServer V6
# Syncplify Server! REST API
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'SS6AdminModule' -name 'SuperAdminApi' {
    Context 'Invoke-AckSaNotificationByID' {
        It 'Test Invoke-AckSaNotificationByID' {
            #$TestResult = Invoke-AckSaNotificationByID -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-AckSaNotifications' {
        It 'Test Invoke-AckSaNotifications' {
            #$TestResult = Invoke-AckSaNotifications
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ActivateLicenseOffline' {
        It 'Test Invoke-ActivateLicenseOffline' {
            #$TestResult = Invoke-ActivateLicenseOffline -InlineObject5 "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ActivateLicenseOnline' {
        It 'Test Invoke-ActivateLicenseOnline' {
            #$TestResult = Invoke-ActivateLicenseOnline -InlineObject4 "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Add-Admin' {
        It 'Test Add-Admin' {
            #$TestResult = Add-Admin -Id "TEST_VALUE" -Admin "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Add-NodeCRTToCSR' {
        It 'Test Add-NodeCRTToCSR' {
            #$TestResult = Add-NodeCRTToCSR -Id "TEST_VALUE" -InlineObject6 "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Add-NodeCertificate' {
        It 'Test Add-NodeCertificate' {
            #$TestResult = Add-NodeCertificate -TLSCertificate "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Add-SuperAdmin' {
        It 'Test Add-SuperAdmin' {
            #$TestResult = Add-SuperAdmin -SuperAdmin "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Add-Vsite' {
        It 'Test Add-Vsite' {
            #$TestResult = Add-Vsite -VirtualSite "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-NodeCSR' {
        It 'Test New-NodeCSR' {
            #$TestResult = New-NodeCSR -CSR "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeactivateLicense' {
        It 'Test Invoke-DeactivateLicense' {
            #$TestResult = Invoke-DeactivateLicense
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteAdmin' {
        It 'Test Invoke-DeleteAdmin' {
            #$TestResult = Invoke-DeleteAdmin -Id "TEST_VALUE" -AdminID "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteNodeCSR' {
        It 'Test Invoke-DeleteNodeCSR' {
            #$TestResult = Invoke-DeleteNodeCSR -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteNodeCertificate' {
        It 'Test Invoke-DeleteNodeCertificate' {
            #$TestResult = Invoke-DeleteNodeCertificate -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteSuperAdminByID' {
        It 'Test Invoke-DeleteSuperAdminByID' {
            #$TestResult = Invoke-DeleteSuperAdminByID -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteVsite' {
        It 'Test Invoke-DeleteVsite' {
            #$TestResult = Invoke-DeleteVsite -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-NodeCert' {
        It 'Test New-NodeCert' {
            #$TestResult = New-NodeCert -CertificateRequest "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Admin' {
        It 'Test Get-Admin' {
            #$TestResult = Get-Admin -Id "TEST_VALUE" -AdminID "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Admins' {
        It 'Test Get-Admins' {
            #$TestResult = Get-Admins -Id "TEST_VALUE" -Offset "TEST_VALUE" -Limit "TEST_VALUE" -Order "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-AvailableBindings' {
        It 'Test Get-AvailableBindings' {
            #$TestResult = Get-AvailableBindings
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-GlobalConfig' {
        It 'Test Get-GlobalConfig' {
            #$TestResult = Get-GlobalConfig
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-License' {
        It 'Test Get-License' {
            #$TestResult = Get-License
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-LicenseMaintenance' {
        It 'Test Get-LicenseMaintenance' {
            #$TestResult = Get-LicenseMaintenance
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Node' {
        It 'Test Get-Node' {
            #$TestResult = Get-Node
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-NodeCSR' {
        It 'Test Get-NodeCSR' {
            #$TestResult = Get-NodeCSR -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-NodeCSRs' {
        It 'Test Get-NodeCSRs' {
            #$TestResult = Get-NodeCSRs
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-NodeCertifcates' {
        It 'Test Get-NodeCertifcates' {
            #$TestResult = Get-NodeCertifcates
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-NodeCertificate' {
        It 'Test Get-NodeCertificate' {
            #$TestResult = Get-NodeCertificate -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Nodes' {
        It 'Test Get-Nodes' {
            #$TestResult = Get-Nodes
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-QRCodePng' {
        It 'Test Get-QRCodePng' {
            #$TestResult = Get-QRCodePng -Issuer "TEST_VALUE" -Email "TEST_VALUE" -Secret "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-RandomBase32' {
        It 'Test Get-RandomBase32' {
            #$TestResult = Get-RandomBase32 -Length "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-RandomName' {
        It 'Test Get-RandomName' {
            #$TestResult = Get-RandomName
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-SaNotification' {
        It 'Test Get-SaNotification' {
            #$TestResult = Get-SaNotification -From "TEST_VALUE" -To "TEST_VALUE" -Limit "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-SaNotificationByID' {
        It 'Test Get-SaNotificationByID' {
            #$TestResult = Get-SaNotificationByID -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-SuperAdminByID' {
        It 'Test Get-SuperAdminByID' {
            #$TestResult = Get-SuperAdminByID -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-SuperAdmins' {
        It 'Test Get-SuperAdmins' {
            #$TestResult = Get-SuperAdmins -Offset "TEST_VALUE" -Limit "TEST_VALUE" -Order "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Vsite' {
        It 'Test Get-Vsite' {
            #$TestResult = Get-Vsite -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-Vsites' {
        It 'Test Get-Vsites' {
            #$TestResult = Get-Vsites -Offset "TEST_VALUE" -Limit "TEST_VALUE" -Order "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-Googleauthenticatortestsa' {
        It 'Test Invoke-Googleauthenticatortestsa' {
            #$TestResult = Invoke-Googleauthenticatortestsa -Secret "TEST_VALUE" -Token "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-ParchGlobalConfig' {
        It 'Test Invoke-ParchGlobalConfig' {
            #$TestResult = Invoke-ParchGlobalConfig -GlobalConfig "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-PatchAdmin' {
        It 'Test Invoke-PatchAdmin' {
            #$TestResult = Invoke-PatchAdmin -Id "TEST_VALUE" -AdminID "TEST_VALUE" -Admin "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-PatchNode' {
        It 'Test Invoke-PatchNode' {
            #$TestResult = Invoke-PatchNode -Node "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-PatchSuperAdminByID' {
        It 'Test Invoke-PatchSuperAdminByID' {
            #$TestResult = Invoke-PatchSuperAdminByID -Id "TEST_VALUE" -SuperAdmin "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-PatchVsite' {
        It 'Test Invoke-PatchVsite' {
            #$TestResult = Invoke-PatchVsite -Id "TEST_VALUE" -VirtualSite "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Remove-HANode' {
        It 'Test Remove-HANode' {
            #$TestResult = Remove-HANode -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Request-LicenseTrial' {
        It 'Test Request-LicenseTrial' {
            #$TestResult = Request-LicenseTrial -InlineObject3 "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-SaBackup' {
        It 'Test Invoke-SaBackup' {
            #$TestResult = Invoke-SaBackup
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-SaLogin' {
        It 'Test Invoke-SaLogin' {
            #$TestResult = Invoke-SaLogin -XOTP "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-SaLogout' {
        It 'Test Invoke-SaLogout' {
            #$TestResult = Invoke-SaLogout
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-SaRestore' {
        It 'Test Invoke-SaRestore' {
            #$TestResult = Invoke-SaRestore -Filename "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Start-Vsite' {
        It 'Test Start-Vsite' {
            #$TestResult = Start-Vsite -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Stop-Vsite' {
        It 'Test Stop-Vsite' {
            #$TestResult = Stop-Vsite -Id "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-Admin' {
        It 'Test Update-Admin' {
            #$TestResult = Update-Admin -Id "TEST_VALUE" -AdminID "TEST_VALUE" -Admin "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-GlobalConfig' {
        It 'Test Update-GlobalConfig' {
            #$TestResult = Update-GlobalConfig -GlobalConfig "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-Node' {
        It 'Test Update-Node' {
            #$TestResult = Update-Node -Node "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-SAPassword' {
        It 'Test Update-SAPassword' {
            #$TestResult = Update-SAPassword -PasswordType "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-SuperAdminByID' {
        It 'Test Update-SuperAdminByID' {
            #$TestResult = Update-SuperAdminByID -Id "TEST_VALUE" -SuperAdmin "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-Vsite' {
        It 'Test Update-Vsite' {
            #$TestResult = Update-Vsite -Id "TEST_VALUE" -VirtualSite "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

}
