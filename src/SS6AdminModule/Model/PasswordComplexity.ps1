#
# SMServer V6
# Syncplify Server! REST API
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER MinLength
No description available.
.PARAMETER RequireUpper
No description available.
.PARAMETER RequireLower
No description available.
.PARAMETER RequireNumber
No description available.
.PARAMETER RequireSpecial
No description available.
.OUTPUTS

PasswordComplexity<PSCustomObject>
#>

function Initialize-SS6PasswordComplexity {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinLength},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequireUpper},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequireLower},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequireNumber},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequireSpecial}
    )

    Process {
        'Creating PSCustomObject: SS6AdminModule => SS6PasswordComplexity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "minLength" = ${MinLength}
            "requireUpper" = ${RequireUpper}
            "requireLower" = ${RequireLower}
            "requireNumber" = ${RequireNumber}
            "requireSpecial" = ${RequireSpecial}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PasswordComplexity<PSCustomObject>

.DESCRIPTION

Convert from JSON to PasswordComplexity<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PasswordComplexity<PSCustomObject>
#>
function ConvertFrom-SS6JsonToPasswordComplexity {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: SS6AdminModule => SS6PasswordComplexity' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SS6PasswordComplexity
        $AllProperties = ("minLength", "requireUpper", "requireLower", "requireNumber", "requireSpecial")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "minLength"))) { #optional property not found
            $MinLength = $null
        } else {
            $MinLength = $JsonParameters.PSobject.Properties["minLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requireUpper"))) { #optional property not found
            $RequireUpper = $null
        } else {
            $RequireUpper = $JsonParameters.PSobject.Properties["requireUpper"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requireLower"))) { #optional property not found
            $RequireLower = $null
        } else {
            $RequireLower = $JsonParameters.PSobject.Properties["requireLower"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requireNumber"))) { #optional property not found
            $RequireNumber = $null
        } else {
            $RequireNumber = $JsonParameters.PSobject.Properties["requireNumber"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requireSpecial"))) { #optional property not found
            $RequireSpecial = $null
        } else {
            $RequireSpecial = $JsonParameters.PSobject.Properties["requireSpecial"].value
        }

        $PSO = [PSCustomObject]@{
            "minLength" = ${MinLength}
            "requireUpper" = ${RequireUpper}
            "requireLower" = ${RequireLower}
            "requireNumber" = ${RequireNumber}
            "requireSpecial" = ${RequireSpecial}
        }

        return $PSO
    }

}

